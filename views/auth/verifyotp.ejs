<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .otp-container {
            background-color: #fff;
            padding: 30px;
            width: 100%;
            max-width: 400px;
            border-radius: 10px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        h2 {
            color: #333;
            margin-bottom: 20px;
            font-size: 24px;
        }
        .otp-input {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        .otp-input input {
            width: 18%;
            padding: 15px;
            font-size: 24px;
            text-align: center;
            border: 2px solid #ddd;
            border-radius: 8px;
            outline: none;
            transition: border-color 0.3s;
        }
        .otp-input input:focus {
            border-color: #333;
        }
        .btn {
            background-color: #333;
            color: white;
            border: none;
            padding: 15px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            transition: background-color 0.3s;
        }
        .btn:hover {
            background-color: #555;
        }
        .toggle-btn {
            background: none;
            border: none;
            color: #007bff;
            cursor: pointer;
            margin-top: 10px;
            font-size: 14px;
            text-decoration: underline;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div class="otp-container">
        <h2>OTP Verification</h2>
        <button type="button" id="toggleOtp" class="toggle-btn">
            <span id="eye-icon">üëÅÔ∏è</span>
        </button>
        <br><br>
        <br>
        <form id="otpForm" action="/verifyotp" method="post">
            <div class="otp-input">
                <input type="password" id="digit1" maxlength="1" name="otp[]" required>
                <input type="password" id="digit2" maxlength="1" name="otp[]" required>
                <input type="password" id="digit3" maxlength="1" name="otp[]" required>
                <input type="password" id="digit4" maxlength="1" name="otp[]" required>
            </div>
            <button type="submit" class="btn">Verify OTP</button>
           
        </form>

        <div class="mt-3">
            <a id="resend-tag" class="link" href="/resendOTP" onclick="return false;">Resend OTP</a>
            <span class="timer ms-2" id="countdown">120</span>
        </div>

        <div class="mt-3">
            <small>By clicking continue, you agree to our <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a></small>
        </div>
    </div>

    <script>
        // Automatically move to the next input box on key press
        const otpInputs = document.querySelectorAll('.otp-input input');

        otpInputs.forEach((input, index) => {
            input.addEventListener('input', () => {
                if (input.value.length === 1 && index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            });

            input.addEventListener('keydown', (e) => {
                if (e.key === 'Backspace' && input.value === '' && index > 0) {
                    otpInputs[index - 1].focus();
                }
            });
        });

        // Toggle between see and hide OTP
        const toggleBtn = document.getElementById('toggleOtp');
        const eyeIcon = document.getElementById('eye-icon');
        let isPasswordHidden = true;

        toggleBtn.addEventListener('click', () => {
            isPasswordHidden = !isPasswordHidden;
            otpInputs.forEach(input => {
                input.type = isPasswordHidden ? 'password' : 'text';
            });
            eyeIcon.textContent = isPasswordHidden ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'; // Change eye icon accordingly
        });

        // SweetAlert for empty fields and incorrect OTP
        document.getElementById('otpForm').addEventListener('submit', async function(event) {
            event.preventDefault(); // Prevent form submission for validation

            // Gather OTP inputs
            let otp = '';
            otpInputs.forEach(input => {
                otp += input.value;
            });

            // Validate if all OTP fields are filled
            if (otp.length < 4) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Incomplete OTP',
                    text: 'Please enter all 4 digits of the OTP!',
                }).then(() => {
                    // Clear OTP inputs
                    otpInputs.forEach(input => input.value = '');
                    otpInputs[0].focus(); // Set focus back to the first input
                });
                return;
            }

            // Perform an AJAX request to verify the OTP with the backend
            try {
                const response = await fetch('/verifyotp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ otp }), // Send the OTP as JSON
                });

                // Check if the response is ok (status 200)
                if (!response.ok) {
                    // Handle server-side error response
                    const errorData = await response.json();
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: errorData.message || 'An error occurred while verifying the OTP. Please try again.',
                    });
                    return;
                }

                // Parse the JSON response from the server
                const result = await response.json();

                // Redirect to login if verification is successful
                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Verified',
                        text: 'You have successfully verified your OTP.',
                    }).then(() => {
                        window.location.href = '/login'; // Redirect to login page
                    });
                } else {
                    // Handle invalid OTP case
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid OTP',
                        text: 'The OTP you entered is incorrect. Please try again.',
                    }).then(() => {
                        // Clear OTP inputs on wrong OTP
                        otpInputs.forEach(input => input.value = '');
                        otpInputs[0].focus(); // Set focus back to the first input
                    });
                }
            } catch (error) {
                // Catch any other errors, including network issues
                Swal.fire({
                    icon: 'error',
                    title: 'Network Error',
                    text: 'An error occurred while trying to connect to the server. Please check your network and try again.',
                });
            }
        });

  // Countdown timer for Resend OTP
let countdown = 10; // Set the initial countdown time
const countdownElement = document.getElementById('countdown');
const resendLink = document.getElementById('resend-tag');

// Function to start the countdown
const startCountdown = () => {
    // Disable the resend link
    resendLink.style.pointerEvents = 'none'; // Disable clicking
    resendLink.style.color = 'gray'; // Optional: Change the color to indicate it is disabled

    // Set the countdown value and display it
    countdownElement.textContent = countdown;

    const timer = setInterval(() => {
        countdown--;
        countdownElement.textContent = countdown;

        if (countdown <= 0) {
            clearInterval(timer);
            resendLink.textContent = 'Resend OTP';
            resendLink.style.pointerEvents = 'auto'; // Enable clicking
            resendLink.style.color = ''; // Reset color
        } else {
            resendLink.textContent = 'Resend OTP (wait ' + countdown + ' seconds)';
        }
    }, 1000);
};

// Initial countdown on page load
startCountdown();

// Add click event listener to resend link
resendLink.addEventListener('click', async (e) => {
    e.preventDefault(); // Prevent the default link behavior

    // Call the backend to resend the OTP
    const response = await fetch('/resendOTP', {
        method: 'POST', // Or GET depending on your API
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email: 'user@example.com' }) // Replace with actual user email if necessary
    });

    const data = await response.json();
    
    // Handle the response as needed (you may want to display a success message or handle errors)
    console.log(data.message);

    // Reset countdown
    countdown = 10; // Reset the countdown time
    startCountdown(); // Restart the countdown
});


// Handle resend OTP request
resendLink.addEventListener('click', async () => {
    // Send the request to the backend to resend OTP
    try {
        const response = await fetch('/resendOTP', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ /* any required data here */ }),
        });

        if (!response.ok) {
            // Handle server-side error response
            const errorData = await response.json();
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: errorData.message || 'An error occurred while resending the OTP. Please try again.',
            });
            return;
        }

        const result = await response.json();

        // Handle success response
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'OTP Resent',
                text: 'A new OTP has been sent to your registered Email.',
             }).then(() => {
                        // Clear OTP inputs on wrong OTP
                        otpInputs.forEach(input => input.value = '');
                        otpInputs[0].focus(); // Set focus back to the first input
                    });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to resend OTP. Please try again later.',
            });
        }
    } catch (error) {
        // Handle network error
        Swal.fire({
            icon: 'error',
            title: 'Network Error',
            text: 'An error occurred while trying to connect to the server. Please check your network and try again.',
        });
    }
});

    </script>

</body>


</html>
