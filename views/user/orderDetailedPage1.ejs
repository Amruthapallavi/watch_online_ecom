<%- include('../include/userHeader.ejs') %>

<style>
  .container-main{
  margin-top: 5%;
  }
  .p-div {
    line-height: 40px;
  }
  
</style>

<div class="container container-main border rounded p-5 shadow mb-5">
  <div class="d-flex justify-content-center"><h2>Order Details</h2></div>

  <div class="mt-3 border-bottom shadow-sm border-primary-subtle">
    
      <h3>Delivery Address :</h3>
    
    
    <div class="ms-1 mt-3 p-div">
      <strong>
        <p>Name : <%=order[0].address.name%> </p>
        <p>Street Address : <%=order[0].address.street%></p>
        <p>State,District : <%=order[0].address.state%>,<%=order[0].address.district%></p>
        <p>City,Locality : <%=order[0].address.city%>,<%=order[0].address.locality%></p>
        <p>PostalCode : <%=order[0].address.pincode%></p>
        <p>Phone : <%=order[0].address.phone%></p>
      </strong>
    </div>
  </div>
  <div class="mt-3">
    <h3>Product Details :</h3>
    <% order.forEach((item)=>{ %>

    
    <div
      class="d-flex align-items-center  mt-3 border-primary-subtle border-bottom shadow-sm"
    >
      <div class="mb-3">
        <img style="max-width: 120px" src="/<%=item.productInfo.image[0]%>" alt="something" />
      </div>
      <div style="width: 100%;" class="ms-5 p-div mb-3">
        <strong>
          <p>Qty : <%=item.productsDetails.quantity%></p>
          <p>Product Name : <%=item.productInfo.pname%></p>
      
          <p>Price : â‚¹<%=item.productInfo.price * item.productsDetails.quantity%></p>
          <p>Order Date : <%=item.placedAt%></p>

        </strong>
       
        
      </div>
    </div>
    <%})%>

  </div>
</div>

<button style="margin-left: 45%; background-color: black;"><a href="/my-orders" style="text-decoration: none; color: white;">Back to Orders</a></button>

<script>
  const cancelOrderbtn = document.getElementById("cancel-order-btn");
  if(cancelOrderbtn){
    cancelOrderbtn.addEventListener("click", () => {
    if (cancelOrderbtn.innerText === "Cancel Order") {
      cancelOrderbtn.innerText = "Close";
    } else {
      cancelOrderbtn.innerText = "Cancel Order";
    }
    const formDiv = document.querySelector(".form-div");
    if (formDiv.style.display === "none") {
      formDiv.style.display = "block";
    } else {
      formDiv.style.display = "none";
    }
  });
  }
  
</script>
<script>
  const submitBtn = document.getElementById('cancel-order-submit');
  if(submitBtn){
    submitBtn.addEventListener('click',()=>{
    
    const reason = document.getElementById('orderReason').value;
    const errorP = document.querySelector('.error-p');
    if(reason === ''){
      errorP.innerText = 'This Field Cannot Be Empty'
      setTimeout(() => {
        errorP.innerText = '';
      }, 3000);
    }else{
      const orderId = submitBtn.dataset.orderid ;
      cancelOrder(reason,orderId);
    }
    
  });
  }
 

  async function cancelOrder(reason,orderId){
    const response = await fetch(`/cancelOrder/${orderId}`,{
      method : "PATCH",
      headers :{
        'content-type' : 'application/json',
      },
      body : JSON.stringify({
        reason : reason
      })

    })
    if(!response.ok){
      console.log('Failed');
    }

    const result = await response.json();

    if(result){
     await Swal.fire("Requested !");
     window.location.reload();

    }

  }


  function validateOrderAndUpdateOrder(data,rzpId,orderId){
    const amount = data.amount/100 ; 
  var options = {
    "key": rzpId,
    "amount": amount,
    "currency": "INR",
    "name": "StopShoppers",
    "description": "Test Transaction",
    "image" : "authPic.jpg",
    "order_id": data.id,
    "handler": async function(responserzp){
      try{
       const response = await fetch(`/updateOrderFromOrderDetail/${orderId}`,{
        method :"PATCH",
        headers :{
          'content-type' : 'application/json'
        },
        body : JSON.stringify({
          amount,
          rzpOrderId: responserzp.razorpay_order_id,
          rzpPaymentId: responserzp.razorpay_payment_id
        })
       });
       if(!response.ok){
        console.log('something went Wrong');
       }else{
        const result = await response.json();
        if(result === 'success'){
         await Swal.fire({
            position: "center",
            icon: "success",
            title: "Your work has been saved",
            showConfirmButton: false,
            timer: 1500
          });
          window.location.reload();
        }
       }
      
      }catch(error){
        console.log(error);
      }
    },
    "prefill": {
      "name": 'something',
      "email": 'something@getMaxListeners.com',
      
    },
    "theme": {
      "color": "#b04fff"
    }
  };

  var rzp = new Razorpay(options);
  rzp.open();

}

  const buttonPayment = document.querySelector('.payment-btn');
  if(buttonPayment){
    buttonPayment.addEventListener('click',async()=>{
   const amount =  buttonPayment.dataset.totalamount;
   const orderId = buttonPayment.dataset.orderid;
   console.log(orderId);
  const response = await fetch('/createOrderFromOrderDetail',{
    method : "POST",
    headers :{
      'content-type' : 'application/json'
    },
    body : JSON.stringify({
      totalAmount : amount
    })
  });

  if(!response.ok){
    console.log('failed to create order');
  }else{ 
    const {data,rzpId} = await response.json();
    
    validateOrderAndUpdateOrder(data,rzpId,orderId)
  }

  })
  }
 



function downloadPdf(orderId){
  window.location.href = `/downloadInvoiceAsPdf/${orderId}`;
}


const cancelSingleProduct = document.querySelectorAll('.cancel-single-product');

if(cancelSingleProduct){
  cancelSingleProduct.forEach((product)=>{
  product.addEventListener('click',async()=>{
   const productId = product.dataset.productid;
   const productSize = product.dataset.productsize;
   const orderId = product.dataset.orderid;
   const productQuantity = product.dataset.productquantity;
   const productPrice = product.dataset.productprice;
    // console.log(productPrice);
    Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes"
      }).then((result) => {
        if (result.isConfirmed) {
        cancelProduct(productId,productSize,orderId,productQuantity,productPrice);
        }
      });
   
  })
});

}



async function cancelProduct(pId,pSize,orderId,pQuantity,productPrice){
  // console.log(pId,pSize,orderId);
  console.log(productPrice);
  const response = await fetch('/cancelProductIndividually',{
    method : 'PATCH',
    headers :{
      'content-type' : 'application/json'
    },
    body : JSON.stringify({
      orderId ,
      pSize,
      pId,
      productPrice
    })
  });
  if(!response.ok){
    console.log('something went wrong');
  }else{
    const result = await response.json();
    if(result){
      await Swal.fire({
            position: "center",
            icon: "success",
            title: "Product Canceled Sucessfully",
            showConfirmButton: false,
            timer: 1500
          });
          window.location.reload();
    }
  }
}
</script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<%- include('../include/userFooter') %>
