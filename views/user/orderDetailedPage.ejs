<%- include('../include/userHeader.ejs') %>

<title>Order Details</title>
<link rel="stylesheet" href="/css/order-details.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- SweetAlert CDN -->

<style>
    body {
        padding: 0;
        background-color: #fff;
    }
</style>
<div class="container" style="background-color: rgb(239, 237, 237);">
    <div class="order-details">
        <h2>Order Details</h2>
        <div class="order-info">
            <p>Order ID: <%= order.paymentDetails.orderId %></p>
            <p>Date: <%= order.placedAt%></p>
            <!-- <p>Status: <span class="order-status" style="color:
                < if (order.orderStatus === 'Confirmed') { %> green
                < } else if (order.orderStatus === 'pending') { %> orange
                < } else if (order.orderStatus === 'Cancelled') { %> red
                < } else if (order.orderStatus === 'Return') { %> orange
                < } else if (order.orderStatus === 'delivered') { %> blue < } %>;">
                <= order.orderStatus %></span>
            </p> -->
        </div>

<!-- Product Details with Selection Option -->
<div class="product-details" id="productDetails">
    <ul class="product-list">
        <% order.products.forEach(product => { %>
        <li class="product-item" style="<%= product.isCanceled ? 'opacity: 0.5; pointer-events: none;' : '' %>">
            <input 
                type="checkbox" 
                class="product-checkbox" 
                value="<%= product.productId %>" 
                <%= product.isCanceled ? 'disabled' : '' %> 
                style="display: <%= product.isCanceled ? 'none' : 'inline-block' %>;">
            <!-- Checkbox will be hidden if the product is canceled -->

            <div class="product-image-container">
                <img 
                    src="/<%= product.image[0] %>" 
                    alt="image loading" 
                    class="product-image" 
                    style="<%= product.isCanceled ? 'filter: grayscale(100%);' : '' %>">
            </div>
            
            <div class="product-info">
                <p class="product-name">
                    <strong><%= product.pname %></strong>
                    <% if (product.isCanceled) { %>
                        <span class="canceled-label" style="color: red;">(Canceled)</span>
                    <% } %>
                </p>
                <p>Quantity: <%= product.quantity %></p>
                <p>
                    Offer Price: <span style="color: green;">
                    <%= order.offerDiscount ? '₹' + Math.round(product.price - product.appliedOffer) : '₹' + product.price.toFixed(2) %></span>
                </p>
                <p>MRP: ₹<%= product.price %></p>
                <p style="color:
                <% if (product.productOrderStatus === 'Confirmed') { %> 
                    green;
                <% } else if (product.productOrderStatus === 'pending') { %> 
                    orange;
                <% } else if (product.productOrderStatus === 'Cancelled') { %> 
                    red;
                <% } else if (product.productOrderStatus === 'Return') { %> 
                    orange;
                <% } else if (product.productOrderStatus === 'Delivered') { %> 
                    blue;
                <% } %>">
                    <%= product.productOrderStatus %>
                </p>

                <!-- Conditionally display the Cancel and Return buttons based on product status -->
                <div class="product-actions">
                    <% if (product.productOrderStatus === 'Confirmed' || product.productOrderStatus === 'Shipped') { %>
                        <button class="cancel-product-btn">Cancel Product</button>
                    <% } else if (product.productOrderStatus === 'Delivered') { %>
                        <button class="return-product-btn">Return Product</button>
                    <% } %>
                </div>
            </div>
        </li>
        <% }) %>
    </ul>

    <div id="cancelReasonForm" style="display: none;">
        <h3>Select a Reason for Cancellation</h3>
        <form id="reasonSelection">
            <label>
                <input type="radio" name="reason" value="Changed my mind" required> Changed my mind
            </label>
            <label>
                <input type="radio" name="reason" value="Found a better price"> Found a better price
            </label>
            <label>
                <input type="radio" name="reason" value="Product not needed"> Product not needed
            </label>
            <label>
                <input type="radio" name="reason" value="Other"> Other
                <input type="text" name="otherReason" placeholder="Specify if other">
            </label>
            <input type="hidden" name="orderId" id="orderId" value="<%= orderId %>">

            <button type="submit">Continue</button>
        </form>
    </div>

    <div id="returnReasonForm" style="display: none;">
        <h3>Select a Reason for Return</h3>
        <form id="returnReasonSelection">
            <label>
                <input type="radio" name="reason" value="Damaged product" required> Damaged product
            </label>
            <label>
                <input type="radio" name="reason" value="Defective" required> Defective
            </label>
            <label>
                <input type="radio" name="reason" value="Wrong item sent" required> Wrong item sent
            </label>
            <label>
                <input type="radio" name="reason" value="Changed my mind" required> Changed my mind
            </label>
            <input type="hidden" name="orderId" id="returnOrderId" value="<%= orderId %>"> <!-- Hidden input for orderId -->
            <input type="hidden" name="productId" id="returnProductId" value=""> <!-- Hidden input for productId -->
            <button type="submit">Submit Return Request</button>
        </form>
    </div>
</div>

    


        <!-- Customer Information -->
        <div class="customer-info">
            <h4>Customer Information</h4>
            <p>Name: <%= user.name %></p>
            <p>Email: <%= user.email %></p>
            <p>Phone: <%= user.phone %></p>
            <p>Delivery Address:  House_No  :<%=order.deliveryAddress.house_no%></p>
            <p><%=order.deliveryAddress.street%>  <%=order.deliveryAddress.city%></p>
            <p><%=order.deliveryAddress.district%> <%=order.deliveryAddress.state%></p>
            <p><%=order.deliveryAddress.pincode%></p>
        </div>

        <!-- Payment Details -->
        <div class="payment-info">
            <h4>Payment Information</h4>
            <p>Payment Method: <%= order.paymentDetails.method %></p>
            <p>Payment ID: <%= order.paymentDetails.paymentId %></p>
            <p>Coupon Applied: <%= order.couponDiscount ? '₹' + order.couponDiscount : 'No' %></p>
            <p>Total: ₹<%= order.grandTotal %></p>
        </div>
        <% 
        // Check if at least one product in the order has 'Delivered' status
        const atLeastOneDelivered = order.products.some(product => product.productOrderStatus === 'Delivered');
    %>
    
    <!-- Conditionally show the Download Invoice button if at least one product is delivered -->
    <% if (atLeastOneDelivered) { %>
        <button id="downloadInvoiceBtn">Download Invoice</button>
    <% } %>
    
        
    <div class="order-actions">
        <% if (order.orderStatus === 'payment pending') { %>
            <button id="retryPaymentBtn">Retry Payment</button>
            <button id="cancelOrderBtn" onclick="confirmCancelOrder('<%= order.orderId %>')">Cancel Order</button>
        <% }  else { %>
            <button id="viewMyOrdersBtn" onclick="window.location.href='/my-orders'">View My Orders</button>
        <% } %>
    </div>
    
       

       
    </div>
</div>   

 
<script>
    // Event listener for Return buttons
    document.querySelectorAll('.return-product-btn').forEach(button => {
        button.addEventListener('click', function() {
            const productItem = this.closest('.product-item');
            const productId = productItem.querySelector('.product-checkbox').value;

            // Show the return reason form and store the selected product ID
            document.getElementById('returnReasonForm').style.display = 'block';
            document.getElementById('returnProductId').value = productId; // Store the productId in the hidden input
        });
    });

    document.getElementById('returnReasonSelection').addEventListener('submit', function(e) {
        e.preventDefault(); // Prevent default form submission

        const selectedReason = this.reason.value; // Get selected reason
        const orderId = document.getElementById('returnOrderId').value; // Get the order ID
        const productId = document.getElementById('returnProductId').value; // Get the product ID from the hidden input

        // Show confirmation popup
        Swal.fire({
            title: 'Are you sure you want to return this order?',
            text: "Reason: " + selectedReason,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, return it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                // Proceed with the return process using POST request
                fetch('/return-product', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        orderId: orderId, 
                        productId: productId, // Include product ID in the body
                        reason: selectedReason 
                    }) // Send orderId, productId, and reason as part of the request body
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Done!', 'Your return request has been sent.', 'success')
                            .then(() => {
                                location.reload(); // Reload the page to reflect changes
                            });
                    } else {
                        Swal.fire('Error!', 'There was an error processing your return.', 'error');
                    }
                })
                .catch(err => {
                    Swal.fire('Error!', 'An unexpected error occurred.', 'error');
                    console.error('Return Error:', err);
                });
            }
        });
    });
</script>

  
    


<!-- Handle Invoice Download -->
<script>
    function toggleCheckboxes() {
        const checkboxes = document.querySelectorAll('.product-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.style.display = checkbox.style.display === 'none' ? 'inline' : 'none'; // Toggle visibility
        });
    }
document.getElementById('downloadInvoiceBtn').addEventListener('click', function() {
    // Get order details to send to the backend
    const orderData = {
        order: {
            orderId: '<%= order.paymentDetails.orderId %>',
            placedAt: '<%= order.placedAt %>',
            products: <%- JSON.stringify(order.products) %>,
            grandTotal: <%= order.grandTotal %>,
            deliveryCharges: +30, // Add delivery charges
            couponApplied: '<%= order.couponDiscount || "No Coupon Applied" %>', // Include coupon applied status
            offerDiscount : '<%= Number(order.offerDiscount) ||0 %>'
        },
        user: {
            name: '<%= user.name %>',
            email: '<%= user.email %>'
        },
        address:{
            street:'<%=order.deliveryAddress.street%>',
            house_no:'<%=order.deliveryAddress.house_no%>',
            city:'<%=order.deliveryAddress.city%>',
            pincode:'<%=order.deliveryAddress.pincode%>',
            district:'<%=order.deliveryAddress.district%>',
            state:'<%=order.deliveryAddress.state%>'
    },
    };

    // Send a POST request to download the invoice
    fetch('/download-invoice', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.blob(); // Get the PDF as a Blob
    })
    .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `invoice_${orderData.order.orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        a.remove();
    })
    .catch(error => {
        Swal.fire('Error!', 'There was an error downloading the invoice. Please try again.', 'error');
        console.error('Error downloading invoice:', error);
    });
});
</script>



<script>
    // Retry Payment Handler
    document.getElementById('retryPaymentBtn').addEventListener('click', function() {
        Swal.fire({
            title: 'Retry Payment?',
            text: "Are you sure you want to retry the payment?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, retry!',
            cancelButtonText: 'No, cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                // Call the backend to get Razorpay order details
                fetch('/retry-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId: '<%= order.orderId %>' })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Initialize Razorpay with the new order details
                        var options = {
                            "key": "rzp_test_AnrHnaf2vgMvpI", // Razorpay API key from the backend
                            "amount": data.amount, // Amount in paise
                            "currency": data.currency,
                            "name": "Tick-Track",
                            "description": "Order Payment",
                            "order_id": data.orderId, // Razorpay Order ID from the backend
                            "handler": function(response) {
                                // Handle successful payment verification
                                fetch('/verify-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                        orderId: '<%= order.orderId %>',
                                    })
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire('Success!', 'Payment verified successfully!', 'success')
                                            .then(() => {
                                                location.reload(); // Reload the page after success
                                            });
                                    } else {
                                        Swal.fire('Error!', data.message || 'Payment verification failed.', 'error');
                                    }
                                })
                                .catch(error => {
                                    console.error('Error during verification:', error);
                                    Swal.fire('Error!', 'Payment verification failed. Please try again.', 'error');
                                });
                            },
                            "prefill": {
                                "name": "<%= user.name %>",
                                "email": "<%= user.email %>",
                                "contact": "<%= user.phone %>"
                            },
                            "theme": {
                                "color": "#3399cc"
                            }
                        };

                        var rzp1 = new Razorpay(options);
                        rzp1.open(); // Open the Razorpay checkout modal
                    } else {
                        Swal.fire('Error!', 'Unable to initiate the payment process. Please try again later.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error initiating payment:', error);
                    Swal.fire('Error!', 'There was an issue retrying the payment. Please try again.', 'error');
                });
            }
        });
    });
</script>

    
<script>
    // Add event listeners to all cancel buttons
    document.querySelectorAll('.cancel-product-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const productId = this.getAttribute('data-product-id');
            toggleCheckboxes(productId); // Show product checkboxes
            document.getElementById('cancelReasonForm').style.display = 'block'; // Show the reason form
        });
    });

    // Handle cancellation form submission
    document.getElementById('reasonSelection').addEventListener('submit', function(e) {
        e.preventDefault(); // Prevent form submission

        const selectedReason = this.reason.value; // Get selected reason
        const orderId = '<%= order.orderId %>'; // Ensure this is the correct way to get the order ID

        // Check if at least one product is selected
        const selectedProducts = Array.from(document.querySelectorAll('.product-checkbox:checked')).map(checkbox => checkbox.value); // Get selected product IDs
        if (selectedProducts.length === 0) {
            Swal.fire('Error!', 'Please select at least one product to cancel.', 'error');
            return;
        }

        // Show confirmation popup
        Swal.fire({
            title: 'Are you sure you want to cancel this product?',
            text: "Reason: " + selectedReason + "\nSelected Products: " + selectedProducts.join(", "),
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                // Proceed with the cancellation
                fetch('/cancel-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId, productIds: selectedProducts, reason: selectedReason }) // Send orderId, productIds, and reason
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Done!', 'Your product cancellation request has been sent.', 'success')
                            .then(() => {
                                location.reload(); // Reload the page to reflect the changes
                            });
                    } else {
                        Swal.fire('Error!', 'There was an error cancelling your product.', 'error');
                    }
                })
                .catch((error) => {
                    console.error('Error:', error);
                    Swal.fire('Error!', 'There was an error cancelling your product.', 'error');
                });
            }
        });
    });

    // Function to toggle checkboxes
    function toggleCheckboxes(productId) {
        document.querySelectorAll(`.product-checkbox[value="${productId}"]`).forEach(checkbox => {
            checkbox.checked = true; // Automatically check the box for the selected product
        });
    }
</script>

<script>
 // Function to confirm cancellation of the order
function confirmCancelOrder(orderId) {
    // Show confirmation dialog using SweetAlert
    Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to cancel this order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!'
    }).then((result) => {
        if (result.isConfirmed) {
            // If confirmed, proceed to cancel the order
            cancelOrder(orderId);
        }
    });
}

// Function to send the cancellation request to the server
async function cancelOrder(orderId) {
    try {
        const response = await fetch(`/cancel-order/${orderId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({}), // Sending an empty body as no reason is required
        });

        if (response.ok) {
            Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success');
            // Optionally, refresh the page or update the UI to reflect the cancellation
            location.reload(); // Reloads the current page
        } else {
            Swal.fire('Error!', 'Failed to cancel the order. Please try again.', 'error');
        }
    } catch (error) {
        console.error('Error cancelling order:', error);
        Swal.fire('Error!', 'Failed to cancel the order. Please try again.', 'error');
    }
}

</script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script> <!-- Razorpay Checkout Library -->
 

<%- include('../include/userFooter.ejs') %>