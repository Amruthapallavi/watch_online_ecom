<%- include('../include/userHeader.ejs') %>

<title>Order Details</title>
<link rel="stylesheet" href="/css/order-details.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- SweetAlert CDN -->

<style>
    body {
        padding: 0;
        background-color: #fff;
    }
</style>

<div class="container" style="background-color: rgb(239, 237, 237);">
    <div class="order-details">
        <h2>Order Details</h2>

        <!-- Order Information -->
        <div class="order-info">
            <p>Order ID: <%= order.paymentDetails.orderId %></p>
            <p>Date: <%= new Date(order.placedAt).toLocaleString('en-IN', {
                day: 'numeric',
                month: 'long',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            }) %></p>

            <p>Status:
                <span class="order-status" style="color:
                    <% if (order.orderStatus === 'Confirmed') { %> green
                    <% } else if (order.orderStatus === 'pending') { %> orange
                    <% } else if (order.orderStatus === 'cancelled') { %> red
                    <% } else if (order.orderStatus === 'Return') { %> orange
                    <% } else if (order.orderStatus === 'delivered') { %> blue
                    <% } %>;">
                    <%= order.orderStatus %>
                </span>
            </p>
        </div>

        <!-- Product Details -->
        <div class="product-details">
            <h3>Product Details</h3>
            <% order.products.forEach(product => { %>
            <div class="product-item">
                <p><strong><%= product.pname %></strong></p>
                <p>Qty: <%= product.quantity %></p>
                <p>Offer Price: <%= order.offerDiscount ? '₹' + Math.round (product.price - order.offerDiscount) : '₹' + product.price.toFixed(2) %></p>

                <p>Price: ₹<%= product.price %></p>

            </div>
            <% }) %>
        </div>

        <!-- Customer Information -->
        <div class="customer-info">
            <h4>Customer Information</h4>
            <p>Name: <%= user.name %></p>
            <p>Email: <%= user.email %></p>
            <p>Phone: <%= user.phone %></p>
            <p>Address:  House_No  :<%=order.deliveryAddress.house_no%></p>
                             <p><%=order.deliveryAddress.street%>  <%=order.deliveryAddress.city%></p>
                             <p><%=order.deliveryAddress.district%> <%=order.deliveryAddress.state%></p>
                             <p><%=order.deliveryAddress.pincode%></p>
        </div>

        <!-- Payment Details -->
        <div class="payment-info">
            <h4>Payment Information</h4>
            <p>Payment Method: <%= order.paymentDetails.method %></p>
            <p>Payment ID: <%= order.paymentDetails.paymentId %></p>
            <p>Coupon Applied: <%= order.couponDiscount ? '₹' + order.couponDiscount : 'No' %></p>
            <p>Total: ₹<%= order.grandTotal %></p>
        </div>

        <% if (order.orderStatus === 'Delivered') { %>
            <button id="downloadInvoiceBtn">Download Invoice</button>
        <% } %>
        <div class="order-actions">
            <% if (order.orderStatus === 'payment pending') { %>
                <!-- Retry Payment Button -->
                <button id="retryPaymentBtn">Retry Payment</button>
                
                <!-- Cancel Order Button -->
                <button id="cancelOrderBtn">Cancel Order</button>
            <% } else if (order.orderStatus === 'Delivered') { %>
                <button id="returnOrderBtn">Return Order</button>
            <% } else if (order.orderStatus == 'Confirmed' || order.orderStatus == 'shipped') { %>
                <button id="cancelOrderBtn">Cancel Order</button>
            <% } else { %>
                <button id="viewMyOrdersBtn" onclick="window.location.href='/my-orders'">View My Orders</button>
            <% } %>
        </div>
        <div id="cancelReasonForm" style="display: none;">
            <h3>Select a Reason for Cancellation</h3>
            <form id="reasonSelection">
                <label>
                    <input type="radio" name="reason" value="Changed my mind" required> Changed my mind
                </label>
                <label>
                    <input type="radio" name="reason" value="Found a better price"> Found a better price
                </label>
                <label>
                    <input type="radio" name="reason" value="Product not needed"> Product not needed
                </label>
                <label>
                    <input type="radio" name="reason" value="Other"> Other
                    <input type="text" name="otherReason" placeholder="Specify if other">
                </label>
                <input type="hidden" name="orderId" id="orderId" value="<%= orderId %>">

                <button type="submit">Continue</button>
            </form>
        </div>
        <!-- Add this div below the Return Order button -->
        <div id="returnReasonForm" style="display: none;">
            <h3>Select a Reason for Return</h3>
            <form id="returnReasonSelection">
                <label>
                    <input type="radio" name="reason" value="Damaged product" required> Damaged product
                </label>
                <label>
                    <input type="radio" name="reason" value="Defective" required> Defective
                </label>
                <label>
                    <input type="radio" name="reason" value="Wrong item sent" required> Wrong item sent
                </label>
                <label>
                    <input type="radio" name="reason" value="Changed my mind" required> Changed my mind
                </label>
                <input type="hidden" name="orderId" id="returnOrderId" value="<%= orderId %>"> <!-- Hidden input for orderId -->
                <button type="submit">Submit Return Request</button>
            </form>
        </div>
    </div>
</div>   
    


<!-- Handle Invoice Download -->
<script>
    
document.getElementById('downloadInvoiceBtn').addEventListener('click', function() {
    // Get order details to send to the backend
    const orderData = {
        order: {
            orderId: '<%= order.paymentDetails.orderId %>',
            placedAt: '<%= order.placedAt %>',
            products: <%- JSON.stringify(order.products) %>,
            grandTotal: <%= order.grandTotal %>,
            deliveryCharges: +30, // Add delivery charges
            couponApplied: '<%= order.couponDiscount || "No Coupon Applied" %>', // Include coupon applied status
            offerDiscount : '<%= Number(order.offerDiscount) ||0 %>'
        },
        user: {
            name: '<%= user.name %>',
            email: '<%= user.email %>'
        },
        address:{
            street:'<%=order.deliveryAddress.street%>',
            house_no:'<%=order.deliveryAddress.house_no%>',
            city:'<%=order.deliveryAddress.city%>',
            pincode:'<%=order.deliveryAddress.pincode%>',
            district:'<%=order.deliveryAddress.district%>',
            state:'<%=order.deliveryAddress.state%>'
    },
    };

    // Send a POST request to download the invoice
    fetch('/download-invoice', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.blob(); // Get the PDF as a Blob
    })
    .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `invoice_${orderData.order.orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        a.remove();
    })
    .catch(error => {
        console.error('Error downloading invoice:', error);
        Swal.fire('Error!', 'There was an error downloading the invoice. Please try again.', 'error');
    });
});
</script>
<script>
    document.getElementById('returnOrderBtn').addEventListener('click', function() {
        document.getElementById('returnReasonForm').style.display = 'block'; // Show the reason form
    });

    document.getElementById('returnReasonSelection').addEventListener('submit', function(e) {
        e.preventDefault(); // Prevent form submission

        const selectedReason = this.reason.value; // Get selected reason
        const orderId = document.getElementById('returnOrderId').value; // Get the order ID

        // Show confirmation popup
        Swal.fire({
            title: 'Are you sure you want to return this order?',
            text: "Reason: " + selectedReason,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, return it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                // Proceed with the return process
                fetch('/return-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId, reason: selectedReason }) // Send orderId and reason
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Done!', 'Your return request has been sent.', 'success')
                            .then(() => {
                                location.reload(); // Reload the page to reflect the changes
                            });
                    } else {
                        Swal.fire('Error!', 'There was an error processing your return.', 'error');
                    }
                });
            }
        });
    });
</script>

<script>
    // Retry Payment Handler
    document.getElementById('retryPaymentBtn').addEventListener('click', function() {
        Swal.fire({
            title: 'Retry Payment?',
            text: "Are you sure you want to retry the payment?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, retry!',
            cancelButtonText: 'No, cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                // Call the backend to get Razorpay order details
                fetch('/retry-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId: '<%= order.orderId %>' })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Initialize Razorpay with the new order details
                        var options = {
                            "key": "rzp_test_AnrHnaf2vgMvpI", // Razorpay API key from the backend
                            "amount": data.amount, // Amount in paise
                            "currency": data.currency,
                            "name": "Tick-Track",
                            "description": "Order Payment",
                            "order_id": data.orderId, // Razorpay Order ID from the backend
                            "handler": function(response) {
                                // Handle successful payment verification
                                fetch('/verify-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                        orderId: '<%= order.orderId %>',
                                    })
                                })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire('Success!', 'Payment verified successfully!', 'success')
                                            .then(() => {
                                                location.reload(); // Reload the page after success
                                            });
                                    } else {
                                        Swal.fire('Error!', data.message || 'Payment verification failed.', 'error');
                                    }
                                })
                                .catch(error => {
                                    console.error('Error during verification:', error);
                                    Swal.fire('Error!', 'Payment verification failed. Please try again.', 'error');
                                });
                            },
                            "prefill": {
                                "name": "<%= user.name %>",
                                "email": "<%= user.email %>",
                                "contact": "<%= user.phone %>"
                            },
                            "theme": {
                                "color": "#3399cc"
                            }
                        };

                        var rzp1 = new Razorpay(options);
                        rzp1.open(); // Open the Razorpay checkout modal
                    } else {
                        Swal.fire('Error!', 'Unable to initiate the payment process. Please try again later.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error initiating payment:', error);
                    Swal.fire('Error!', 'There was an issue retrying the payment. Please try again.', 'error');
                });
            }
        });
    });
</script>

    
<!-- Handle Cancel Order -->
<script>
    document.getElementById('cancelOrderBtn').addEventListener('click', function() {
        document.getElementById('cancelReasonForm').style.display = 'block'; // Show the reason form
    });

    document.getElementById('reasonSelection').addEventListener('submit', function(e) {
        e.preventDefault(); // Prevent form submission

        const selectedReason = this.reason.value; // Get selected reason
        const orderId = '<%= order._id %>'; // Get the order ID

        // Show confirmation popup
        Swal.fire({
            title: 'Are you sure you want to cancel this order?',
            text: "Reason: " + selectedReason,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                // Proceed with the cancellation
                fetch('/cancel-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ orderId, reason: selectedReason }) // Send orderId and reason
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Done!', 'Your order cancellation request has been sent.', 'success')
                            .then(() => {
                                location.reload(); // Reload the page to reflect the changes
                            });
                    } else {
                        Swal.fire('Error!', 'There was an error cancelling your order.', 'error');
                    }
                });
            }
        });
    });
</script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script> <!-- Razorpay Checkout Library -->
 

<%- include('../include/userFooter.ejs') %>