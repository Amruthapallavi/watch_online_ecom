
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="/css/adminDashboard.css">
<title>Admin Dashboard</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<link href="https://unpkg.com/cropperjs/dist/cropper.css" rel="stylesheet"/>


<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Work+Sans&display=swap" rel="stylesheet">
<link rel="stylesheet" href="/css/style.css">
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">

<style>
    /* styles.css */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f8f9fa;
}

.container {
    max-width: 800px;
    margin: auto;
    padding: 20px;
}

canvas {
    width: 100% !important; /* Make the canvas responsive */
    height: auto !important; /* Maintain aspect ratio */
}


    body {
        font-family: Arial, sans-serif;
        background-color: #f8f8f8;
        margin: 0;
        color: black;
    }
    h1 {
        text-align: center;
        margin-bottom: 20px;
    }
    .summary, .charts-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        margin-bottom: 20px;
    }
    .card, .chart-box {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin: 10px;
        padding: 15px;
        flex: 1 1 calc(30% - 20px); /* Responsive card sizing */
        min-width: 250px; /* Minimum width for smaller screens */
    }
    #salesChart, #categorySalesChart, #paymentMethodsChart {
        max-width: 100%; /* Ensure charts are responsive */
        height: 200px; /* Adjusted height for charts */
    }
    .container {
    padding: 20px; /* Add padding for aesthetics */
}

.report-controls {
    display: flex;                  /* Use flexbox to arrange items in a row */
    align-items: center;           /* Center items vertically */
    gap: 10px;                     /* Add space between items */
}

.report-controls label {
    margin: 0;                     /* Remove default margin */
}

#customRange {
    display: flex;                 /* Make custom range labels and inputs display inline */
    gap: 5px;                      /* Space between labels and inputs */
}
.report-controls {
    display: flex; /* Use flexbox layout */
    align-items: center; /* Center align items vertically */
    gap: 10px; /* Space between elements */
}

.custom-range {
    display: flex; /* Flexbox for custom range fields */
    gap: 10px; /* Space between date inputs */
}

label {
    margin: 0; /* Remove margin for labels */
}

input[type="date"], select {
    padding: 5px; /* Add padding for better touch targets */
}

</style>

</head>
<body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-black" style="min-height: 85px; margin-top: 0;" >
        <div class = "container">
            <a href="/" class="navbar-brand"><i class="fas fa-code me-2"></i>ADMIN-HOME</a>
            <button class="navbar-toggler" data-bs-target="#my-nav"
            data-bs-toggle="collapse" aria-controls="my-nav" aria-expanded="false"
            aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div id="my-nav" style="padding-left: 360px;" class="collapse navbar-collapse">
                <u1 class = "navbar-nav ms-auto">
                    <li class="nav-item active">
                        <a style="padding-left: 0; padding-right: 0;" class="nav-link" href="/adminHome"><i class = "fas fa-home me-i"></i>Home</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="/users"><i class="fas fa-user-plus me-1"></i>Users</a>
                    </li> 

                    <li class="nav-item active">
                        <a class="nav-link" href="/products"><i class="fas fa-user-plus me-1"></i>Products</a>
                    </li>
                    <li class="nav-item active">
                      <a class="nav-link" href="/orders"><i class="fas fa-user-plus me-1"></i>Orders</a>
                  </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="/category"><i class="fas fa-user-plus me-1"></i>Category</a>
                    </li> 
                    <li class="nav-item active">
                        <a class="nav-link" href="/adminCoupon"><i class="fas fa-user-plus me-1"></i>Offers</a>
                    </li>
                    <!-- <li class="nav-item active">
                        <a class="nav-link" href="#"><i class="fas fa-globe me-1"></i>Cart</a>
                    </li> -->
                    <li class="nav-item active">
                       <li> <a href="/adminLogout">
   <button class="btn btn-light" style="width: 100px; height:35px; font-size:15px; font-weight:600" type="submit"> Log out</button>
  </a></li>
                    </li>
                </u1>
            </div>
        </div>
    </nav> 

<main style="color: black;">

    
    <div class="summary">
        <div class="card visits">
            <h2>Total Sales</h2>
            <p id="overallSales"><%= data.totalGrandTotal || 0 %></p>
        </div>
        <div class="card revenue">
            <h2>Orders</h2>
            <p id="overallOrders"><%=data.totalOrders || 0%></p>
        </div>
        <!-- <div class="card sales">
            <h2>Discount</h2>
            <p id="overallDiscount"><= data.totalAppliedOffers %></p>
        </div> -->
        <div class="card visits">
            <h2>Coupon Discount</h2>
            <p id="overallCoupon"><%=data.totalCouponDiscount.toFixed(2)%></p>
       </div>
        <div class="card products">
            <h2>Active Users</h2>
            <p id="allUser"><%=activeUsers%></p>
        </div>
    </div>
   
    
    
    
    
   
    <div class="order-list-container" style="max-width: 95%; background-color: white;max-height: 60%;">
        <div class="container">
            <div class="report-controls">
                <label for="reportType">Report Type:</label>
                <select id="reportType" style="max-width: 200px;">
                    <option value="daily">Daily</option>
                    <option value="weekly">Weekly</option>
                    <option value="monthly">Monthly</option>
                    <option value="yearly">Yearly</option>
                    <option value="custom">Custom Range</option>
                </select>
        
                <div id="customRange" style="display: none;" class="custom-range">
                    <label for="startDate">Start Date:</label>
                    <input type="date" id="startDate" />
        
                    <label for="endDate">End Date:</label>
                    <input type="date" id="endDate" />
                </div>
        
                <button class="generate-report-button" onclick="generateReport()">Generate Report</button>
            </div>
        </div>

        <div class="summary1" style="display: none;">
            <div class="percentage-card">
                <h2>Total Sales</h2>
                <p id="totalSales">₹0</p>
            </div>
            <div class="percentage-card">
                <h2>Orders</h2>
                <p id="totalOrders">0</p>
            </div>
            <div class="percentage-card">
                <h2>Coupon Discount</h2>
                <p id="totalDiscount">₹0</p>
            </div>
            <div class="percentage-card">
                <h2>Offer</h2>
                <p id="newUsers">₹0</p>
            </div>
        </div>


        <!-- Filter Section -->
        <div class="order-filter">
            <label for="orderFilter">Filter by:</label>
            <select id="orderFilter" onchange="filterOrders()">
                <option value="all">All</option>
                <option value="pending">Pending</option>
                <option value="confirmed">Confirmed</option>
                <option value="delivered">Delivered</option>
                <option value="Return">Return</option>

                <option value="cancelled">Cancelled</option>
            </select>
        </div>
    
        <!-- Headline Row -->
        <div class="order-headline">
            <span class="order-id">Order ID</span>
            <span class="image">Image</span>
            <span class="productname">Product Name</span>
            <span class="quantity">Quantity</span>
            <span class="status">Status</span>
            <span class="total">Total</span>
            <span class="more">Options</span>
        </div>
    
        <!-- Order Listing -->
      <!-- Order Listing -->
<ul class="order-list" id="orderList">

    <% orders.slice(0, 5).forEach(order => { %>
        <li class="order-item">
            <div class="order-header">
                <span class="order-id"><%= order.orderId %></span>
                
                <span class="image" style="max-width: 100px; max-height: 100px;">
                    <img src="<%= order.image[0] %>" alt="<%= order.product_name %>" class="product-image">
                </span>
                <span class="product-name"><%= order.product_name %></span>
                <span class="quantity"><%= order.quantity %></span>
                <span class="status"><%= order.productStatus %></span>
                
                <span class="total">₹<%= (Math.round((order.offerPrice - (order.couponDiscount || 0)) * 100) / 100).toFixed(2) %></span>
                <!-- More Button with Unique ID -->
                <button class="more-btn" onclick="toggleOrderDetails('<%= order.order_id %>')">More</button>
            </div>
            <!-- Order Details with Unique ID -->
            <div class="order-details" id="details-<%= order.order_id %>" style="display: none;">
                <p><strong>Shipping Address:</strong> <%= order.shippingAddress.house_no %>, <%= order.shippingAddress.street %></p>
                <p><%= order.shippingAddress.locality %>, <%= order.shippingAddress.city %>, <%= order.shippingAddress.district %></p>
                <p><%= order.shippingAddress.state %>, <%= order.shippingAddress.pincode %></p>
                <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                <button class="less-btn" onclick="toggleOrderDetails('<%= order.order_id %>')">Less</button>
            </div>
        </li>
    <% }); %>
</ul>

<% if (orders.length > 5) { %>
    <div id="more-orders" class="more-orders">
        <button onclick="showMoreOrders()">Show More</button>
    </div>
<% } %>

    </div>
    
    <div class="charts-container">
        <!-- Left Chart (Bar for Category Sales) -->
        <div class="chart-box" style="max-height: 800px;">
            <h2 class="chart-title">Category-wise Sales</h2>
            <canvas id="categorySalesChart"></canvas>
        </div>

        <!-- Right Chart (Pie for Payment Methods) -->
        <div class="chart-box" style="max-width: 500px; max-height: 600px;">
            <h2 class="chart-title">Payment Methods Used</h2>
            <canvas id="paymentMethodsChart" style="max-width: 400px; max-height: 400px; padding-left: 15%;"></canvas>
        </div>
    </div>
    
    
    
    
    <div class="dashboard-container">
        <!-- Top Selling Products -->
        <div class="top-selling-section">
            <h2>Top selling Products</h2>
            <ul class="product-list">
                <% topProducts.forEach(product => { %>
                <li class="product-item">
                    <img src="<%= product.productDetails.image[0] %>" alt="<%= product.productName %>" class="product-image">
                    <div class="product-details">
                        <span class="product-name"><%= product.productDetails.pname %></span><br>
                        <span class="product-stock">Sold Out: <%= product.totalQuantity %></span><br>
                        <span class="product-mrp">MRP: ₹<%= product.productDetails.price %></span> <br>
                        <span class="product-color">Description: <%= product.productDetails.description %></span><br>
                    </div>
                </li>
                <% }); %>
            </ul>
        </div>

        <div class="top-selling-section">
            <h2>Top selling categories</h2>
            <ul class="product-list">
                <% topCategories.forEach(category => { %>
                <li class="product-item">
                    <div class="product-details">
                        <span class="product-name"><%= category.categoryName %></span><br>
                        <span class="product-color">Sold Out: <%= category.totalQuantity %></span><br>
                    </div>
                </li>
                <% }); %>
            </ul>
            <h2>Top Selling Brands</h2>
            <ul class="product-list">
                <% topBrands.forEach(brand => { %>
                <li class="product-item">
                    <div class="product-details">
                        <span class="product-name"><%= brand.brand %></span><br>
                        <span class="product-color">Sold Out: <%= brand.totalQuantity %></span><br>
                    </div>
                </li>
                <% }); %>
            </ul>
        </div>
    </div>
    <div class="download-options">
        <button class="download-button" onclick="downloadPDF()">Download PDF</button>
        <button class="download-button" onclick="downloadExcel()">Download Excel</button>
    </div>
</main>
   
    


<footer style="background-color: black;">
    <p>Tick-Tock</p>
    <p>About Us | Category | Blog</p>
    <div>
        <p>Information | Help Center | My Orders</p>
    </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
 function toggleOrderDetails(orderId) {
    const detailsDiv = document.getElementById(`details-${orderId}`);
    if (detailsDiv.style.display === 'none' || detailsDiv.style.display === '') {
        detailsDiv.style.display = 'block';
    } else {
        detailsDiv.style.display = 'none';
    }
}

function filterOrders() {
    const filter = document.getElementById("orderFilter").value.toLowerCase(); // Convert filter to lowercase
    const orders = document.querySelectorAll(".order-item");

    orders.forEach(order => {
        const status = order.querySelector(".status").textContent.toLowerCase(); // Get status and convert to lowercase
        // Check if the status matches the filter
        if (filter === "all" || status === filter) {
            order.style.display = "block"; // Show the order
        } else {
            order.style.display = "none"; // Hide the order
        }
    });
}


function toggleOrderDetails(orderId) {
    const detailsDiv = document.getElementById(`details-${orderId}`);
    if (detailsDiv.style.display === 'none') {
        detailsDiv.style.display = 'block';
    } else {
        detailsDiv.style.display = 'none';
    }
}


   </script>

<script>
   

    // Function to update dashboard totals
    function updateDashboardData(totalSales, totalOrders, totalDiscount, activeUsers) {
        document.getElementById('totalSales').innerText = totalSales;
        document.getElementById('totalOrders').innerText = totalOrders;
        document.getElementById('totalDiscount').innerText = totalDiscount;
        document.getElementById('newUsers').innerText = activeUsers;
    }

   

    function generateReport() {
    const reportType = document.getElementById('reportType').value;
    let startDate = null;
    let endDate = null;
    const summaryDiv = document.querySelector('.summary1');
    summaryDiv.style.display = 'flex'; // Change to block to display it
    if (reportType === 'custom') {
        startDate = document.getElementById('startDate').value;
        endDate = document.getElementById('endDate').value;
    }

    // Fetch dashboard data from backend
    fetch('/dashboard-data', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ reportType, startDate, endDate }),
    })
    .then(response => response.json())
    .then(data => {
        console.log('Received report data:', data);

        // Update the dashboard metrics
        updateDashboardData(
            `₹${data.totalSales.toLocaleString()}`, 
            data.totalOrders.toString(), 
            `₹${data.totalCouponDiscount.toLocaleString()}`, 
            parseFloat(data.totalOfferDiscount).toFixed(2) 
        );

        // Populate order details dynamically
        renderOrderList(data.orders); // Assuming `data.orders` is the array of orders from the backend
    });
}

function renderOrderList(orders) {
    const orderListContainer = document.querySelector('.order-list');
    orderListContainer.innerHTML = ''; // Clear existing orders

    // Loop through orders and generate HTML dynamically
    orders.forEach(order => {
        const orderItem = `
        <li class="order-item">
            <div class="order-header">
                <span class="order-id">${order.orderId}</span>
                 <span class="image"><img src="${order.image[0]}" alt="Product Image" class="product-image" />
</span>

                <span class="product-name">${order.product_name}</span>

                <span class="quantity">${order.quantity}</span>
                <span class="status">${order.productStatus}</span>
<span class="total">₹${order.offerPrice - (order.couponDiscount || 0).toFixed(2)}</span>
                <button class="more-btn" onclick="toggleOrderDetails('${order._id}')">More</button>
            </div>
            <div class="order-details" id="details-${order._id}" style="display: none;">
                <p><strong>Shipping Address:</strong> ${order.shippingAddress}</p>
                <p><strong>Payment Method:</strong> ${order.paymentMethod}</p>
                <button class="less-btn" onclick="toggleOrderDetails('${order._id}')">Less</button>
            </div>
        </li>
        `;
        orderListContainer.innerHTML += orderItem;
    });
}

function toggleOrderDetails(orderId) {
    const detailsDiv = document.getElementById(`details-${orderId}`);
    const isVisible = detailsDiv.style.display === 'block';
    detailsDiv.style.display = isVisible ? 'none' : 'block';
}

</script>
<script>
    //custom range
    document.getElementById('reportType').addEventListener('change', function() {
        const customRangeDiv = document.getElementById('customRange');
        customRangeDiv.style.display = this.value === 'custom' ? 'block' : 'none';
    });
    function downloadPDF() {
    const reportType = document.getElementById('reportType').value;
    let startDate = null;
    let endDate = null;

    if (reportType === 'custom') {
        startDate = document.getElementById('startDate').value;
        endDate = document.getElementById('endDate').value;
    }

    //  order details
    const orderItems = Array.from(document.querySelectorAll('.order-item')).map(item => {
        const orderId = item.querySelector('.order-id').textContent;
        const productId= item.querySelector('.product-id')
        const productName = item.querySelector('.product-name').textContent;
        const quantity = item.querySelector('.quantity').textContent;
        const status = item.querySelector('.status').textContent;
        const total = item.querySelector('.total').textContent;
        const shippingAddress = item.querySelector('.order-details') ? 
            item.querySelector('.order-details p strong').nextSibling.textContent : ''; // Extract shipping address
        const paymentMethod = item.querySelector('.order-details') ? 
            item.querySelector('.order-details p + p strong').nextSibling.textContent : ''; // Extract payment method

        return {
            orderId,
            productName,
            quantity,
            status,
            total,
            shippingAddress,
            paymentMethod
        };
    });

    window.location.href = `/download/pdf?reportType=${reportType}&startDate=${startDate}&endDate=${endDate}&orders=${JSON.stringify(orderItems)}`;
}

function downloadExcel() {
    const reportType = document.getElementById('reportType').value;
    let startDate = null;
    let endDate = null;

    if (reportType === 'custom') {
        startDate = document.getElementById('startDate').value;
        endDate = document.getElementById('endDate').value;
    }

    // Gather order details
    const orderItems = Array.from(document.querySelectorAll('.order-item')).map(item => {
        const orderId = item.querySelector('.order-id').textContent;
        const productName = item.querySelector('.product-name').textContent;
        const quantity = item.querySelector('.quantity').textContent;
        const status = item.querySelector('.status').textContent;
        const total = item.querySelector('.total').textContent;
        const shippingAddress = item.querySelector('.order-details') ? 
            item.querySelector('.order-details p strong').nextSibling.textContent : ''; // Extract shipping address
        const paymentMethod = item.querySelector('.order-details') ? 
            item.querySelector('.order-details p + p strong').nextSibling.textContent : ''; // Extract payment method

        return {
            orderId,
            productName,
            quantity,
            status,
            total,
            shippingAddress,
            paymentMethod
        };
    });

    window.location.href = `/download/excel?reportType=${reportType}&startDate=${startDate}&endDate=${endDate}&orders=${JSON.stringify(orderItems)}`;
}

</script>
<script>
    const categorySalesData = <%- JSON.stringify(categorySales) %>;
    const paymentMethodsData = <%- JSON.stringify(paymentMethods) %>;

    const categoryNames = categorySalesData.map(item => item.cname); // Extract category names
    const categorySales = categorySalesData.map(item => item.totalSales); // Extract total sales

    // Extract data for Payment Methods Chart
    const paymentMethods = paymentMethodsData.map(item => item.method); // Extract payment method names
    const paymentCounts = paymentMethodsData.map(item => item.count); // Extract the count of each method used

    // Create Category Sales Chart
    const categorySalesCtx = document.getElementById('categorySalesChart').getContext('2d');
    new Chart(categorySalesCtx, {
        type: 'bar', // Choose bar chart
        data: {
            labels: categoryNames, // X-axis labels
            datasets: [{
                label: 'Total Sales by Category',
                data: categorySales, // Y-axis data
                backgroundColor: 'rgba(54, 162, 235, 0.2)', // Bar color
                borderColor: 'rgba(54, 162, 235, 1)', // Border color
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Create Payment Methods Chart
    const paymentMethodsCtx = document.getElementById('paymentMethodsChart').getContext('2d');
    new Chart(paymentMethodsCtx, {
        type: 'pie', // Choose pie chart
        data: {
            labels: paymentMethods, // X-axis labels
            datasets: [{
                label: 'Payment Methods Used',
                data: paymentCounts, // Y-axis data
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)'
                ], // Pie slice colors
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
        }
    });


    let currentOrderIndex = 5; // Start after the first 5 orders

function showMoreOrders() {
    const orderList = document.getElementById('orderList');
    const orders = <%- JSON.stringify(orders) %>; // Pass orders to JavaScript
    const moreOrdersCount = orders.length;

    // Display the next set of orders
    const endIndex = currentOrderIndex + 5; // Show 5 more orders
    for (let i = currentOrderIndex; i < endIndex && i < moreOrdersCount; i++) {
        const order = orders[i];
        const orderItem = document.createElement('li');
        orderItem.className = 'order-item';
        orderItem.innerHTML = `
            <div class="order-header">
                <span class="order-id">${order.orderId}</span>
                <span class="image" style="max-width: 100px; max-height: 100px;">
                    <img src="${order.image[0]}" alt="${order.product_name}" class="product-image">
                </span>
                <span class="product-name">${order.product_name}</span>
                <span class="quantity">${order.quantity}</span>
                <span class="status">${order.productStatus}</span>
                <span class="total">₹${(order.offerPrice - (order.couponDiscount || 0)).toFixed(2)}</span>
                <button class="more-btn" onclick="toggleOrderDetails('${order.order_id}')">More</button>
            </div>
            <div class="order-details" id="details-${order.order_id}" style="display: none;">
                <p><strong>Shipping Address:</strong> ${order.shippingAddress.house_no}, ${order.shippingAddress.street}</p>
                <p>${order.shippingAddress.locality}, ${order.shippingAddress.city}, ${order.shippingAddress.district}</p>
                <p>${order.shippingAddress.state}, ${order.shippingAddress.pincode}</p>
                <p><strong>Payment Method:</strong> ${order.paymentMethod}</p>
                <button class="less-btn" onclick="toggleOrderDetails('${order.order_id}')">Less</button>
            </div>
        `;
        orderList.appendChild(orderItem);
    }

    currentOrderIndex += 5; // Update the index for the next batch

    // Hide the button if there are no more orders to display
    if (currentOrderIndex >= moreOrdersCount) {
        document.getElementById('more-orders').style.display = 'none';
    }
}

</script>
<script>
    const expand_btn = document.querySelector(".expand-btn");

let activeIndex;

expand_btn.addEventListener("click", () => {
  document.body.classList.toggle("collapsed");
});

const current = window.location.href;

const allLinks = document.querySelectorAll(".sidebar-links a");

allLinks.forEach((elem) => {
  elem.addEventListener("click", function () {
    const hrefLinkClick = elem.href;

    allLinks.forEach((link) => {
      if (link.href == hrefLinkClick) {
        link.classList.add("active");
      } else {
        link.classList.remove("active");
      }
    });
  });
});

const searchInput = document.querySelector(".search__wrapper input");

searchInput.addEventListener("focus", (e) => {
  document.body.classList.remove("collapsed");
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <script src="/js/adminDashboard.js"></script>
</body>
</html>

