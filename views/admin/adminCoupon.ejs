<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coupon & Voucher List</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="https://unpkg.com/cropperjs/dist/cropper.css" rel="stylesheet"/>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/adminCoupon.css">
    <script defer src="script.js"></script>
</head>
<style>
        .pagination {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

.pagination a {
  margin: 0 5px;
  padding: 10px;
  background-color: #ddd;
  text-decoration: none;
  color: black;
  border-radius: 5px;
}

.pagination a.active {
  background-color: black;
  color: white;
}
</style>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-black">
        <div class="container bg-black">
            <a href="/" class="navbar-brand"><i class="fas fa-code me-2"></i>ADMIN-HOME</a>
            <button class="navbar-toggler" data-bs-target="#my-nav" data-bs-toggle="collapse" aria-controls="my-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div id="my-nav" class="collapse navbar-collapse">
                <u1 class="navbar-nav ms-auto">
                    <li class="nav-item active">
                        <a class="nav-link" href="/adminHome">Home</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="/users">Users</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="/products">Products</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="/orders">Orders</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="/category">Category</a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="/offers">Offers</a>
                    </li>
                    <li class="nav-item active">
                        <li> <a href="/adminLogout">
                            <button class="btn btn-light" style="width: 100px; height:35px; font-size:15px; font-weight:600" type="submit"> Log out</button>
                        </a></li>
                    </li>
                </u1>
            </div>
        </div>
    </nav>
    <div class="container mt-3">
        <h1>Coupon & Voucher List</h1>
        <button class="add-coupon-btn" onclick="openAddForm()">Add new Coupon</button>

        <table>
            <thead>
                <tr>
                    <th>Code</th>
                    <th>Value</th>
                    <th>Expire At</th>
                    <th>Min Purchase</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="coupon-list">
                <% coupons.forEach(coupon => { %>
                <tr>
                    <td><%= coupon.code %></td>
                    <td><%= coupon.value %>%</td>
                    <td><%= new Date(coupon.expiresAt).toISOString().split('T')[0] %></td>
                    <td><%= coupon.min_purchase %></td>
                    <td>
                        <!-- Edit button triggers the edit form -->
                        <a href="#" onclick="openEditForm('<%= coupon._id %>', '<%= coupon.code %>', <%= coupon.value %>, '<%= new Date(coupon.expiresAt).toISOString().split('T')[0] %>', <%= coupon.min_purchase %>)">
                            <i class="fa fa-pencil"></i>
                        </a>
                        <!-- Delete button -->
                        <a href="/deleteCoupon/<%= coupon._id %>" onclick="return deleteCoupon(this)">
                            <i class="fa fa-trash"></i>
                        </a>
                    </td>
                </tr>
                <% }) %>
            </tbody>
        </table>
        

        <!-- Add Coupon Form -->
        <div class="form-popup" id="addCouponForm">
            <form class="coupon-form" id="add-coupon-form" action="/addCoupon" method="POST" onsubmit="return validateCouponCode('add')">
                <h2>Add Coupon</h2>
                <label for="add-code">Coupon Code</label>
                <input type="text" id="add-code" name="code" required>

                <label for="add-value">Value (%)</label>
                <input type="number" id="add-value" name="value" required >

                <label for="add-expireAt">Expire At</label>
                <input type="date" id="add-expireAt" name="expireAt" required>

                <label for="min-purchase">Min Purchase ($)</label>
                <input type="number" id="min-purchase" name="min_purchase" required>

                <button type="submit">Save</button>
                <button type="button" class="cancel-btn" onclick="closeAddForm()">Cancel</button>
            </form>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

    </div>    <!-- Edit Coupon Form -->
       
<!-- Edit Coupon Form -->
<div class="form-popup" id="editCouponForm" style="display:none;">
    <form class="coupon-form" id="edit-coupon-form" action="/editCoupon/:id" method="POST" onsubmit="return validateEditCoupon()">
        <h2>Edit Coupon</h2>
        
        <label for="edit-code">Coupon Code</label>
        <input type="text" id="edit-code" value="" name="code" required>

        <label for="edit-value">Value (%)</label>
        <input type="number" id="edit-value" name="value" required >

        <label for="edit-expireAt">Expire At</label>
        <input type="date" id="edit-expireAt" name="expireAt" required>

        <label for="edit-min-purchase">Min Purchase ($)</label>
        <input type="number" id="edit-min-purchase" name="min_purchase" required>

        <button type="submit">Update</button>
        <button type="button" class="cancel-btn" onclick="closeEditForm()">Cancel</button>
    </form>
</div>
<div class="pagination">
    <% if (currentPage > 1) { %>
        <a href="/adminCoupon?page=<%= currentPage - 1 %>">&laquo;</a>
    <% } %>

    <% for (let i = 1; i <= totalPages; i++) { %>
        <a href="/adminCoupon?page=<%= i %>" class="<%= i === currentPage ? 'active' : '' %>"><%= i %></a>
    <% } %>

    <% if (currentPage < totalPages) { %>
        <a href="/adminCoupon?page=<%= currentPage + 1 %>">&raquo;</a>
    <% } %>
</div>


    <script>
    function openAddForm() {
        document.getElementById("addCouponForm").style.display = "block";
    }

    function closeAddForm() {
        document.getElementById("addCouponForm").style.display = "none";
    }

   


function openEditForm(id, code, value, expireAt, minPurchase) {
        document.getElementById("edit-code").value = code;
        document.getElementById("edit-value").value = value;
        document.getElementById("edit-expireAt").value = expireAt;
        document.getElementById("edit-min-purchase").value = minPurchase;

        // Set the form action to the update route with the coupon ID
        document.getElementById("edit-coupon-form").action = `/editCoupon/${id}`;

        document.getElementById("editCouponForm").style.display = "block";
    }

    function closeEditForm() {
        document.getElementById("editCouponForm").style.display = "none";
    }

    function deleteCoupon(element) {
        event.preventDefault(); // Prevent the default link click behavior
        swal("Are you sure you want to delete this coupon?", {
            buttons: ["Cancel", "Delete"],
        }).then((isOkay) => {
            if (isOkay) {
                window.location.href = element.href;
            }
        });
    }

   
    // Function to validate coupon code and value before submitting
    // function validateCouponCode(formType) {
    //     const valueField = document.getElementById(`${formType}-value`);
    //     const couponValue = parseInt(valueField.value, 10);

    //     // Check if the value is greater than 99
    //     if (couponValue > 99) {
    //         swal("Error", "Coupon value cannot exceed 99%", "error");
    //         return false; // Prevent form submission
    //     }

    //     return true;
    // }

    // Add validation to both add and edit forms
    document.getElementById('add-coupon-form').onsubmit = function() {
        return validateCouponCode('add');
    };

    document.getElementById('edit-coupon-form').onsubmit = function() {
        return validateCouponCode('edit');
    };
    document.getElementById('add-coupon-form').addEventListener('submit', async function(event) {
        event.preventDefault(); // Prevent default form submission
        

        const valueField = document.getElementById('add-value');
        const couponValue = parseInt(valueField.value, 10);
        const minPurchaseField = document.getElementById('min-purchase');
        const minPurchaseValue = parseFloat(minPurchaseField.value);
        // Check if the coupon value is greater than 99
        if (couponValue > 99) {
            Swal.fire('Error', 'Coupon value cannot exceed 99%', 'error');
            return; // Stop further execution
        }
       

       

        // Check if the minimum purchase value is 0
        if (minPurchaseValue <= 0) {
            Swal.fire('Error', 'Minimum purchase must be greater than 0', 'error');
            return; // Stop further execution
        }
        const formData = new FormData(this);
        const formObj = {};
        formData.forEach((value, key) => formObj[key] = value);

        try {
            const response = await fetch('/addCoupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formObj),
            });

            const data = await response.json();
            if (response.ok) {
                // Show success message
                Swal.fire('Success', data.message, 'success');
                // Optionally refresh the coupon list or redirect
                setTimeout(() => {
                    window.location.reload(); // Refresh the page after successful addition
                }, 1500);
            } else {
                // Show error message
                Swal.fire('Error', data.message, 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire('Error', 'An unexpected error occurred!', 'error');
        }
    });

    function openAddForm() {
        document.getElementById('addCouponForm').style.display = 'block';
    }

    function closeAddForm() {
        document.getElementById('addCouponForm').style.display = 'none';
    }

//edit coupon

document.getElementById('edit-coupon-form').addEventListener('submit', async function(event) {
    event.preventDefault(); // Prevent default form submission

    const valueField = document.getElementById('edit-value');
    const couponValue = parseInt(valueField.value, 10);
    const minPurchaseField = document.getElementById('edit-min-purchase');
    const minPurchaseValue = parseFloat(minPurchaseField.value);

    // Check if the coupon value is greater than 99
    if (couponValue > 99) {
        Swal.fire('Error', 'Coupon value cannot exceed 99%', 'error');
        return; // Stop further execution
    }

    // Check if the minimum purchase value is 0
    if (minPurchaseValue <= 0) {
        Swal.fire('Error', 'Minimum purchase must be greater than 0', 'error');
        return; // Stop further execution
    }

    const formData = new FormData(this);
    const formObj = {};
    formData.forEach((value, key) => formObj[key] = value);

    try {
        const response = await fetch(this.action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formObj),
        });

        const data = await response.json();
        if (response.ok) {
            // Show success message
            Swal.fire('Success', data.message, 'success');
            // Optionally refresh the coupon list or redirect
            setTimeout(() => {
                window.location.reload(); // Refresh the page after successful update
            }, 1500);
        } else {
            // Show error message
            Swal.fire('Error', data.message, 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'An unexpected error occurred!', 'error');
    }
});

    
    </script>

    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
</body>
</html>
