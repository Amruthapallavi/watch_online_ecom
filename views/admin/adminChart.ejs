<%- include('../include/adminHeader.ejs') %>

<link rel="stylesheet" href="/css/adminDashboard.css">
<title>Admin Dashboard</title>
<style>
    /* styles.css */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f8f9fa;
}

.container {
    max-width: 800px;
    margin: auto;
    padding: 20px;
}

canvas {
    width: 100% !important; /* Make the canvas responsive */
    height: auto !important; /* Maintain aspect ratio */
}


    body {
        font-family: Arial, sans-serif;
        background-color: #f8f8f8;
        margin: 0;
        padding: 20px;
        color: black;
    }
    h1 {
        text-align: center;
        margin-bottom: 20px;
    }
    .summary, .charts-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        margin-bottom: 20px;
    }
    .card, .chart-box {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin: 10px;
        padding: 15px;
        flex: 1 1 calc(30% - 20px); /* Responsive card sizing */
        min-width: 250px; /* Minimum width for smaller screens */
    }
    #salesChart, #categorySalesChart, #paymentMethodsChart {
        max-width: 100%; /* Ensure charts are responsive */
        height: 200px; /* Adjusted height for charts */
    }
    /* Other styles remain the same */
</style>

</head>
<body>

<main style="color: black;">

    
    <h1>Dashboard</h1>
    <div class="summary">
        <div class="card visits">
            <h2>Total Sales</h2>
            <p id="overallSales"><%=data.totalGrandTotal%></p>
        </div>
        <div class="card revenue">
            <h2>Orders</h2>
            <p id="overallOrders"><%=data.totalOrders%></p>
        </div>
        <div class="card sales">
            <h2>Discount</h2>
            <p id="overallDiscount"><%= Math.round(data.totalAppliedOffers) %></p>
        </div>
        <div class="card visits">
            <h2>Coupon Discount</h2>
            <p id="overallCoupon"><%=data.totalOfferDiscount%></p>
       </div>
        <div class="card products">
            <h2>Active Users</h2>
            <p id="allUser"><%=activeUsers%></p>
        </div>
    </div>
    
    <div class="container">
        <!-- <h2>Sales Report</h2> -->
        <div class="report-controls">
            <!-- <label for="reportType">Report Type:</label> -->
            <select id="reportType">
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
                <option value="custom">Custom Range</option>
            </select>

            <div id="customRange" style="display: none;">
                <label for="startDate">Start Date:</label>
                <input type="date" id="startDate">
                <label for="endDate">End Date:</label>
                <input type="date" id="endDate">
            </div>

            <button class="generate-report-button" onclick="generateReport()">Generate Report</button>
        </div>
    </div>
    
    <div class="summary">
        <div class="card visits">
            <h2>Total Sales</h2>
            <p id="totalSales">₹0</p>
        </div>
        <div class="card revenue">
            <h2>Orders</h2>
            <p id="totalOrders">0</p>
        </div>
        <div class="card sales" >
            <h2>Coupon Discount</h2>
            <p id="totalDiscount">₹0</p>
        </div>
        <div class="card products">
            <h2>Offer </h2>
            <p id="newUsers">₹0</p>
        </div>
    </div>
<!-- Percentage Chart HTML -->
<div class="summary">
    <div class="percentage-card">
        <h2>SALES</h2>
        <div class="percentage-circle profit" data-percentage="0"></div>
    </div>
    <div class="percentage-card">
        <h2>ORDERS</h2>
        <div class="percentage-circle visits" data-percentage="0"></div>
    </div>
    <div class="percentage-card">
        <h2>COUPONS</h2>
        <div class="percentage-circle customers" data-percentage="0"></div>
    </div>
    <div class="percentage-card">
        <h2>OFFERS</h2>
        <div class="percentage-circle sales" data-percentage="0"></div>
    </div>
</div>
<div class="container">
    <h1>Sales Chart</h1>
    <canvas id="salesChart"></canvas>
</div>


    <div class="charts-container">
        <!-- Left Chart (Bar for Category Sales) -->
        <div class="chart-box">
            <h2 class="chart-title">Category-wise Sales</h2>
            <canvas id="categorySalesChart"></canvas>
        </div>

        <!-- Right Chart (Pie for Payment Methods) -->
        <div class="chart-box">
            <h2 class="chart-title">Payment Methods Used</h2>
            <canvas id="paymentMethodsChart"></canvas>
        </div>
    </div>
    <div class="dashboard-container">
        <!-- Total Sales Chart -->
       

        <!-- Top Selling Products -->
        <div class="top-selling-section">
            <h2>Top selling Products</h2>
            <ul class="product-list">
                <% topProducts.forEach(product => { %>
                <li class="product-item">
                    <img src="<%= product.productDetails.image[0] %>" alt="<%= product.productName %>" class="product-image">
                    <div class="product-details">
                        <span class="product-name"><%= product.productDetails.pname %></span><br>
                        <span class="product-stock">
                            Sold Out: <%= product.totalQuantity %>
                        </span><br>
                        <span class="product-mrp">MRP: ₹<%= product.productDetails.price %></span> <br>
                        <span class="product-color">Color: <%= product.productDetails.description %></span><br>

                    </div>
                </li>
                <% }); %>
            </ul>
        </div>

        <div class="top-selling-section">
            <h2>Top selling categories</h2>
            <ul class="product-list">
                <% topCategories.forEach(category => { %>
                <li class="product-item">
                    <div class="product-details">
                        <span class="product-name"><%= category.categoryName %></span><br>
                        <span class="product-stock">
                        </span><br>
                        <span class="product-color">Sold Out: <%= category.totalQuantity %></span><br>
                    </div>
                </li>
                <% }); %>
            </ul>
        </div>
    </div>
    <div class="download-options">
        <button class="download-button" onclick="downloadPDF()">Download PDF</button>
        <button class="download-button" onclick="downloadExcel()">Download Excel</button>
    </div>
</main>
   
    


<footer>
    <p>Tick-Tock</p>
    <p>About Us | Category | Blog</p>
    <div>
        <p>Information | Help Center | My Orders</p>
    </div>
</footer>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<script>
    const ctx = document.getElementById('salesChart').getContext('2d');
    let salesChart; // Declare salesChart variable globally

  

// script.js
async function fetchSalesData() {
    try {
        const response = await fetch('/dashboard-data', { // Adjust the API endpoint as necessary
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ reportType: 'monthly' }) // Modify the request as needed
        });

        const data = await response.json();
        return data; // Return the data for further processing
    } catch (error) {
        console.error('Error fetching sales data:', error);
    }
}

async function renderChart() {
    const salesData = await fetchSalesData();
    const labels = salesData.sales.map(item => item.label); // Extract labels (dates)
    const sales = salesData.sales.map(item => item.totalSales); // Extract sales values

    const ctx = document.getElementById('salesChart').getContext('2d');
    const salesChart = new Chart(ctx, {
        type: 'line', // You can change this to 'bar', 'pie', etc.
        data: {
            labels: labels,
            datasets: [{
                label: 'Total Sales',
                data: sales,
                borderColor: 'rgba(75, 192, 192, 1)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                fill: true,
                borderWidth: 2,
                tension: 0.3, // Smoother curves
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false, // Allow the chart to resize
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Date',
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Sales',
                    },
                    beginAtZero: true // Start y-axis at 0
                }
            }
        }
    });
}

// Call the renderChart function to fetch data and render the chart
renderChart();








    // Function to update dashboard totals
    function updateDashboardData(totalSales, totalOrders, totalDiscount, activeUsers) {
        document.getElementById('totalSales').innerText = totalSales;
        document.getElementById('totalOrders').innerText = totalOrders;
        document.getElementById('totalDiscount').innerText = totalDiscount;
        document.getElementById('newUsers').innerText = activeUsers;
    }

    // Function to update or create the sales chart
    function updateChart(labels, data) {
        if (salesChart) {
            // If the chart already exists, just update it
            salesChart.data.labels = labels;
            salesChart.data.datasets[0].data = data;
            salesChart.update();
        } else {
            // Create a new chart if one doesn't exist
            salesChart = new Chart(ctx, {
                type: 'line', // You can also use 'bar', 'pie', etc.
                data: {
                    labels: labels, // X-axis labels
                    datasets: [{
                        label: 'Total Sales',
                        data: data, // Y-axis data
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            beginAtZero: true
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
    }

    

  // Function to generate report, and the data from the backend
function generateReport() {
    const reportType = document.getElementById('reportType').value;
    let startDate = null;
    let endDate = null;

    if (reportType === 'custom') {
        startDate = document.getElementById('startDate').value;
        endDate = document.getElementById('endDate').value;
    }

    // Fetch dashboard data from backend
    fetch('/dashboard-data', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ reportType, startDate, endDate }),
    })
    .then(response => response.json())
    .then(data => {
        console.log('recercjjrndj data',data);
        // Update the dashboard metrics
        updateDashboardData(
            `₹${data.sales.toLocaleString()}`, 
            data.totalOrders.toString(), 
            `₹${data.couponDiscount.toLocaleString()}`, 
            data.offerDiscount.toString()
        );

        // Prepare the data for the chart
        const labels = data.salesData.map(item => item.label); // Labels (e.g., dates)
        const chartData = data.salesData.map(item => item.totalSales); // Sales totals

        // Update chart with the new data
        updateChart(labels, chartData);

        // Update percentage data for circles
        updatePercentageCircles({
            profit: data.profitPercentage,
            visits: data.visitsPercentage,
            customers: data.customersPercentage,
            sales: data.salesPercentage
        });
    })
    .catch(error => console.error('Error fetching dashboard data:', error));
}

// Function to update percentage circles dynamically
function updatePercentageCircles(percentageData) {
    Object.keys(percentageData).forEach(circleClass => {
        const circleElement = document.querySelector(`.percentage-circle.${circleClass}`);
        const percentage = percentageData[circleClass];
        
        // Update the circle's percentage and background dynamically
        circleElement.style.background = `conic-gradient(${getCircleColor(circleClass)} 0% ${percentage}%, #f4f4f4 ${percentage}% 100%)`;
        circleElement.setAttribute('data-percentage', percentage);
    });
}

// Function to get the color for each circle
function getCircleColor(circleClass) {
    const circleColors = {
        profit: '#3498db',
        visits: '#e74c3c',
        customers: '#2ecc71',
        sales: '#f39c12'
    };
    return circleColors[circleClass] || '#000'; // Default to black if no match
}

    document.addEventListener('DOMContentLoaded', function () {
    // Define the data you want to apply to each circle dynamically (from backend or static)
    const circleData = {
        profit: { percentage: 22, color: '#3498db' },
        visits: { percentage: 46, color: '#e74c3c' },
        customers: { percentage: 84, color: '#2ecc71' },
        sales: { percentage: 55, color: '#f39c12' }
    };

    // Loop through each circle and dynamically set the percentage and color
    Object.keys(circleData).forEach(circleClass => {
        const circleElement = document.querySelector(`.percentage-circle.${circleClass}`);
        const { percentage, color } = circleData[circleClass];
        
        // Set the percentage and color dynamically
        circleElement.style.setProperty('--percentage', `${percentage}%`);
        circleElement.style.setProperty('--color', color);
        circleElement.setAttribute('data-percentage', percentage);
    });
});
async function fetchDashboardData() {
            try {
                // Fetch data from your backend API
                const response = await fetch('/dashboard-data', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reportType: 'monthly' }) // Example reportType
                });
                const data = await response.json();

                // Destructure required fields from response
                const { totalGrandTotal, totalOrders, totalDiscount, totalOfferAmount, salesData } = data;

                // Prepare the data for the percentage chart
                const totalSales = totalGrandTotal;
                const discountPercentage = (totalDiscount / 60) * 100;
                const offerPercentage = (totalOfferAmount / totalSales) * 100;
                const salesPercentage = 100 - (discountPercentage + offerPercentage);

                // Define labels and data for the chart
                const labels = ['Sales', 'Discounts', 'Offers'];
                const chartData = [salesPercentage, discountPercentage, offerPercentage];

                // Create the percentage chart using Chart.js
                const ctx = document.getElementById('salesPercentageChart').getContext('2d');
                const myChart = new Chart(ctx, {
                    type: 'pie', // Use pie chart to display percentages
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Sales Distribution',
                            data: chartData,
                            backgroundColor: [
                                'rgba(75, 192, 192, 0.2)',  // Sales color
                                'rgba(255, 99, 132, 0.2)',  // Discount color
                                'rgba(255, 206, 86, 0.2)',  // Offer color
                            ],
                            borderColor: [
                                'rgba(75, 192, 192, 1)',
                                'rgba(255, 99, 132, 1)',
                                'rgba(255, 206, 86, 1)',
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        const label = context.label || '';
                                        const value = context.raw.toFixed(2);
                                        return `${label}: ${value}%`;
                                    }
                                }
                            }
                        }
                    }
                });

            } catch (error) {
                console.error('Error fetching dashboard data:', error);
            }
        }

        // Call the function to fetch data and render the chart
        fetchDashboardData();
</script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    //custom range
    document.getElementById('reportType').addEventListener('change', function() {
        const customRangeDiv = document.getElementById('customRange');
        customRangeDiv.style.display = this.value === 'custom' ? 'block' : 'none';
    });
    
    function downloadPDF() {
        const reportType = document.getElementById('reportType').value;
        let startDate = null;
        let endDate = null;

        if (reportType === 'custom') {
            startDate = document.getElementById('startDate').value;
            endDate = document.getElementById('endDate').value;
        }

        // Redirect to the backend route for PDF generation
        window.location.href = `/download/pdf?reportType=${reportType}&startDate=${startDate}&endDate=${endDate}`;
    }

    function downloadExcel() {
        const reportType = document.getElementById('reportType').value;
        let startDate = null;
        let endDate = null;

        if (reportType === 'custom') {
            startDate = document.getElementById('startDate').value;
            endDate = document.getElementById('endDate').value;
        }

        // Redirect to the backend route for Excel generation
        window.location.href = `/download/excel?reportType=${reportType}&startDate=${startDate}&endDate=${endDate}`;
    }


</script>
<script>
    // Category-wise Sales Data from Backend (passed via EJS)
    const categorySalesData = <%- JSON.stringify(categorySales) %>;
    const paymentMethodsData = <%- JSON.stringify(paymentMethods) %>;

    // Extract data for Category Sales Chart
    const categoryNames = categorySalesData.map(item => item.cname); // Extract category names
    const categorySales = categorySalesData.map(item => item.totalSales); // Extract total sales

    // Extract data for Payment Methods Chart
    const paymentMethods = paymentMethodsData.map(item => item.method); // Extract payment method names
    const paymentCounts = paymentMethodsData.map(item => item.count); // Extract the count of each method used

    // Create Category Sales Chart
    const categorySalesCtx = document.getElementById('categorySalesChart').getContext('2d');
    new Chart(categorySalesCtx, {
        type: 'bar', // Choose bar chart
        data: {
            labels: categoryNames, // X-axis labels
            datasets: [{
                label: 'Total Sales by Category',
                data: categorySales, // Y-axis data
                backgroundColor: 'rgba(54, 162, 235, 0.2)', // Bar color
                borderColor: 'rgba(54, 162, 235, 1)', // Border color
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Create Payment Methods Chart
    const paymentMethodsCtx = document.getElementById('paymentMethodsChart').getContext('2d');
    new Chart(paymentMethodsCtx, {
        type: 'pie', // Choose pie chart
        data: {
            labels: paymentMethods, // X-axis labels
            datasets: [{
                label: 'Payment Methods Used',
                data: paymentCounts, // Y-axis data
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)'
                ], // Pie slice colors
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
        }
    });
</script>

</body>
</html>


